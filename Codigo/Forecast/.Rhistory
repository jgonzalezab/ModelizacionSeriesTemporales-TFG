library(rdatamarket)
library(zoo)
library(ggplot2)
library(forecast)
library(tseries)
library(ggfortify)
accidentes <- as.ts(dmseries('http://data.is/1yFXOBi'))
acc.train <- window(accidentes, start = c(1960,1), end = c(1973,12))
acc.test <- window(accidentes, start = c(1974,1))
# Combine Function
combine <- function(test, pred) {
p <- ggplot() +
geom_line(aes(x = index(as.zoo(test)), y = coredata(as.zoo(test)), colour = 'Test')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = pred, colour = 'Prediccion')) +
scale_color_manual(name = '', values = c('Test' = 'black', 'Prediccion' = 'red'),
labels = c('Test','Predicción')) + ylab('Número de accidentes de tráfico') +
xlab('Año 1974') + scale_x_continuous(breaks = c(), labels = c())
p
}
figura.1 <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.train)), y = coredata(as.zoo(acc.train)), colour = 'Training')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = coredata(as.zoo(acc.test)), colour = 'Test')) +
scale_color_manual(name = '', values = c('Training' = 'blue', 'Test' = 'red'),
labels = c('Test','Training')) +
xlab('Año') + ylab('Número de accidentes de\ntráfico')
figura.1
seasonplot(x = acc.train, s = findfrequency(acc.train),
xlab = 'Mes', ylab = 'Número de accidentes de tráfico', main = '')
d <- decompose(acc.train)
componentes <- list('Serie' = acc.train,
'Tendencia' = d$trend,
'Estacionalidad' = d$seasonal,
'Irregular' = d$random)
autoplot(componentes$Serie, xlab = 'Año', ylab = 'Número de accidentes de tráfico', main = '')
autoplot(componentes$Tendencia, xlab = 'Año', ylab = 'Número de accidentes de tráfico', main = '')
acc.train.decomp <- decompose(acc.train)
acc.train.seasadj <- seasadj(acc.train.decomp)
autoplot(acc.train.seasadj, xlab = 'Año', ylab = 'Número de accidentes de tráfico', main = '')
model <- meanf(acc.train, h = 12)
autoplot(model, xlab = 'Año', ylab = 'Número de accidentes de tráfico', main = '')
model <- naive(acc.train, h = 12)
combine(model$mean, acc.test)
model <- snaive(acc.train, h = 12)
autoplot(model, xlab = 'Año', ylab = 'Número de accidentes de tráfico', main = '')
model.mean <- meanf(acc.train, h = 12)
model.naive <- naive(acc.train, h = 12)
model.snaive <- snaive(acc.train, h = 12)
model.rwf <- rwf(acc.train, h = 12, drift = TRUE)
figura.11 <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.test)), y = coredata(as.zoo(acc.test)), colour = 'Test')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = model.mean$mean, colour = 'Meanf')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = model.naive$mean, colour = 'Naive')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = model.snaive$mean, colour = 'Snaive')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = model.rwf$mean, colour = 'Rwf')) +
scale_color_manual(name = '', values = c('Test' = 'black',
'Meanf' = 'red', 'Naive' = 'blue', 'Snaive' = 'green',
'Rwf' = 'yellow'),
labels = c('Meanf','Naive', 'Rwf', 'Snaive', 'Test')) +
ylab('Número de accidentes de tráfico') + xlab('Año 1974') +
scale_x_continuous(breaks = c(), labels = c())
figura.11
model <- tslm(acc.train ~ trend + season)
pred <- forecast(model, h = 12)
combine(pred$mean, acc.test)
model.mult <- hw(acc.train, h = 12, damped = TRUE, seasonal = 'multiplicative',
initial = 'optimal')
summary(model.mult)
autoplot(model.mult)
combine(acc.test, model.mult$mean)
accuracy(model.mult, acc.test) # 15.04762
checkresiduals(model.mult) # No son ruido blanco
model.adit <- hw(acc.train, h = 12, damped = TRUE, seasonal = 'additive',
initial = 'optimal')
summary(model.adit)
autoplot(model.adit)
combine(acc.test, model.adit$mean)
accuracy(model.adit, acc.test) # 19.67722
checkresiduals(model.adit) # No son ruido blanco
figura.1 <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.train)),
y = coredata(as.zoo(acc.train)), colour = 'Serie original')) +
geom_line(aes(x = index(as.zoo(fitted(model.adit))),
y = coredata(as.zoo(fitted(model.adit))), colour = 'H-W Aditivo')) +
geom_line(aes(x = index(as.zoo(fitted(model.mult))),
y = coredata(as.zoo(fitted(model.mult))), colour = 'H-W Multiplicativo')) +
scale_color_manual(name = '', values = c('Serie original' = 'black', 'H-W Multiplicativo' = 'red',
'H-W Aditivo' = 'green'),
labels = c('H-W Aditivo','H-W Multiplicativo','Serie original')) +
xlab('Año') + ylab('Número de accidentes de\ntráfico')
figura.1
figura.2 <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.test)), y = coredata(as.zoo(acc.test)), colour = 'Serie original')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = model.adit$mean, colour = 'H-W Aditivo')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = model.mult$mean, colour = 'H-W Multiplicativo')) +
scale_color_manual(name = '', values = c('Serie original' = 'black', 'H-W Multiplicativo' = 'red',
'H-W Aditivo' = 'green'),
labels = c('H-W Aditivo','H-W Multiplicativo','Serie original')) +
xlab('Año') + ylab('Número de accidentes de tráfico') + scale_x_continuous(breaks = c(), labels = c())
figura.2
acc.train.diff <- diff(acc.train)
autoplot(Acf(acc.train.diff), main = '')
autoplot(Pacf(acc.train.diff), main = '')
autoplot(diff(accidentes, 12), xlab = 'Año', ylab = 'Serie original diferenciada\nestacionalmente',
main = '')
autoplot(Acf(diff(accidentes, 12)), main = '')
autoplot(Pacf(diff(accidentes, 12)), main = '')
model.sin <- Arima(acc.train, order = c(1,0,1), seasonal = c(2,1,1), include.drift = FALSE)
pred.sin <- forecast(model.sin, h = 12)
model.con <- Arima(acc.train, order = c(1,0,1), seasonal = c(2,1,1), include.drift = TRUE)
pred.con <- forecast(model.con, h = 12)
figura.20 <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.test)), y = coredata(as.zoo(acc.test)), colour = 'Test')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = pred.sin$mean, colour = 'Sin intercepto')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = pred.con$mean, colour = 'Con intercepto')) +
scale_color_manual(name = '', values = c('Test' = 'black', 'Sin intercepto' = 'red',
'Con intercepto' = 'green'),
labels = c('Con intercepto', 'Sin intercepto', 'Test')) + ylab('Número de accidentes de tráfico') +
xlab('Año 1974') + scale_x_continuous(breaks = c(), labels = c())
figura.20
library(ggplot2)
library(zoo)
library(forecast)
library(tseries)
datos <- read.csv('monthly-traffic-fatalities-in-on.csv')
accidentes <- ts(datos, start = c(1960, 1), frequency = 12)
accidentes.zoo <- zoo(datos, order.by = seq.Date(from = as.Date('1960/01/01'), by = 'month',
length.out = nrow(datos)), frequency = 12)
colnames(accidentes.zoo) <- 'accidentes
decomposition <- decompose(accidentes, type = 'additive')
accidentes.adj <- seasadj(decomposition)
datos <- read.csv('monthly-traffic-fatalities-in-on.csv')
accidentes <- ts(datos, start = c(1960, 1), frequency = 12)
accidentes.zoo <- zoo(datos, order.by = seq.Date(from = as.Date('1960/01/01'), by = 'month',
length.out = nrow(datos)), frequency = 12)
colnames(accidentes.zoo) <- 'accidentes'
decomposition <- decompose(accidentes, type = 'additive')
accidentes.adj <- seasadj(decomposition)
acc.train.adj <- window(accidentes.adj, start = c(1960,1), end = c(1973,12))
acc.test.adj <- window(accidentes.adj, start = c(1974,1))
figura.22 <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.train.adj)), y = coredata(as.zoo(acc.train.adj)), colour = 'Training')) +
geom_line(aes(x = index(as.zoo(acc.test.adj)), y = coredata(as.zoo(acc.test.adj)), colour = 'Test')) +
scale_color_manual(name = '', values = c('Training' = 'blue', 'Test' = 'red'),
labels = c('Test','Training')) +
xlab('Año') + ylab('Número de accidentes de \n tráfico')
figura.22
accidentes.dif.adj <- diff(accidentes.adj)
acc.train.dif.adj <- window(accidentes.dif.adj, start = c(1960,2), end = c(1973,12)) # Perdemos una observación
acc.test.dif.adj <- window(accidentes.dif.adj, start = c(1974,1))
figura.23 <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.train.dif.adj)), y = coredata(as.zoo(acc.train.dif.adj)), colour = 'Training')) +
geom_line(aes(x = index(as.zoo(acc.test.dif.adj)), y = coredata(as.zoo(acc.test.dif.adj)), colour = 'Test')) +
scale_color_manual(name = '', values = c('Training' = 'blue', 'Test' = 'red'),
labels = c('Test','Training')) +
xlab('Año') + ylab('Primeras diferencias')
figura.23
boots.block <- tsbootstrap(acc.train.dif.adj, type = 'block')
boots.stationary <- tsbootstrap(acc.train.dif.adj, type = 'stationary')
p <- ggplot() +
geom_line(aes(x = index(acc.train.dif.adj),
y = coredata(as.zoo(boots.block)), colour = 'Block')) +
geom_line(aes(x = index(acc.train.dif.adj),
y = coredata(as.zoo(boots.stationary)), colour = 'Stationary')) +
geom_line(aes(x = index(as.zoo(acc.train.dif.adj)),
y = coredata(acc.train.dif.adj), colour = 'Original')) +
scale_color_manual(name = '', values = c('Original' = 'black', 'Block' = 'red', 'Stationary' = 'blue'),
labels = c('Block','Original', 'Stationary')) +
xlab('Año') + ylab('Número de accidentes de tráfico') +
scale_x_continuous(breaks = c(), labels = c())
p
surr <- surrogate(acc.train.dif.adj, ns = 1, fft = TRUE, amplitude = TRUE)
figura.25 <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.train.dif.adj)), y = coredata(as.zoo(acc.train.dif.adj)), colour = 'Original')) +
geom_line(aes(x = index(as.zoo(surr)), y = coredata(as.zoo(surr)), colour = 'Surrogated')) +
scale_color_manual(name = '', values = c('Original' = 'black', 'Surrogated' = 'red'),
labels = c('Bootstrap','Surrogate')) +
xlab('Año') + ylab('Primeras diferencias')
figura.25
autoplot(Acf(acc.train.dif.adj), main = '')
autoplot(Pacf(acc.train.dif.adj), main = '')
model <- arma(acc.train.dif.adj, order = c(2,1), include.intercept = FALSE)
figura <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.train.dif.adj)), y = coredata(as.zoo(acc.train.dif.adj)), colour = 'Original')) +
geom_line(aes(x = index(as.zoo(fitted(model))), y = coredata(as.zoo(fitted(model))), colour = 'Ajustada')) +
scale_color_manual(name = '', values = c('Original' = 'black', 'Ajustada' = 'blue'),
labels = c('Ajustada', 'Original')) +
xlab('Año') + ylab('Primeras diferencias')
figura
library(ggplot2)
library(zoo)
library(forecast)
library(tseries)
library(FitARMA)
datos <- read.csv('monthly-traffic-fatalities-in-on.csv')
accidentes <- ts(datos, start = c(1960, 1), frequency = 12)
decomposition <- decompose(accidentes, type = 'additive')
accidentes.adj <- seasadj(decomposition) # Forecast
acc.train.adj <- window(accidentes.adj, start = c(1960,1), end = c(1973,12))
acc.test.adj <- window(accidentes.adj, start = c(1974,1))
accidentes.dif.adj <- diff(accidentes.adj)
acc.train.dif.adj <- window(accidentes.dif.adj, start = c(1960,2), end = c(1973,12)) # Perdemos una observación
acc.test.dif.adj <- window(accidentes.dif.adj, start = c(1974,1))
model.1 <- FitARMA(acc.train.dif.adj, order = c(2,0,1))
autoplot(Acf(residuals(model.1)), main = '')
model <- FitARMA(acc.train.dif.adj, order = c(2,0,1), MeanMLEQ =  TRUE)
figura <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.train.dif.adj)), y = coredata(as.zoo(acc.train.dif.adj)), colour = 'Original')) +
geom_line(aes(x = index(as.zoo(fitted(model))), y = coredata(as.zoo(fitted(model))), colour = 'Ajustada')) +
scale_color_manual(name = '', values = c('Original' = 'black', 'Ajustada' = 'blue'),
labels = c('Ajustada', 'Original')) +
xlab('Año') + ylab('Primeras diferencias')
figura
oracle.convex <- oracle(Y = acc.test, experts = X, loss.type = "absolute", model = "convex")
plot(oracle.convex)
red <- nnetar(acc.train, repeats = 25, size = 20, decay = 9.5, p = 20, P = 4)
pred.red <- forecast(red, h = 12)
accuracy(pred.red, acc.test)
sarima <- auto.arima(acc.train, test = 'adf')
pred.sarima <- forecast(sarima, h = 12)
accuracy(pred.sarima, acc.test)
pred.hw <- hw(acc.train, h = 12, damped = TRUE, seasonal = 'multiplicative',
initial = 'optimal')
accuracy(pred.hw, acc.test)
X <- cbind(red = pred.red$mean, sarima = pred.sarima$mean, hw = pred.hw$mean)
p <- ggplot() +
geom_line(aes(x = index(as.zoo(acc.test)), y = coredata(as.zoo(acc.test)), colour = 'Original')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = X[, 1], colour = 'Red Neuronal')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = X[, 2], colour = 'SARIMA')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = X[, 3], colour = 'Holt-Winters')) +
scale_color_manual(name = '', values = c('Original' = 'black',
'Red Neuronal' = 'blue',
'SARIMA' = 'red',
'Holt-Winters' = 'green'),
labels = c('Holt-Winters','Original', 'Red Neuronal', 'SARIMA')) +
xlab('Año 1974') + ylab('Número de accidentes de\ntráfico') +
scale_x_continuous(breaks = c(), labels = c())
p
oracle.convex <- oracle(Y = acc.test, experts = X, loss.type = "absolute", model = "convex")
plot(oracle.convex)
library(ggplot2)
library(zoo)
library(forecast)
library(tseries)
library(FitARMA)
library(opera)
oracle.convex <- oracle(Y = acc.test, experts = X, loss.type = "absolute", model = "convex")
plot(oracle.convex)
oracle.linear <- oracle(Y = acc.test, experts = X, loss.type = "absolute", model = "linear")
plot(oracle.linear)
oracle.convex <- oracle(Y = acc.test, experts = X, loss.type = "absolute", model = "convex")
oracle.linear <- oracle(Y = acc.test, experts = X, loss.type = "absolute", model = "linear")
p <- ggplot() +
geom_line(aes(x = index(acc.test),
y = coredata(as.zoo(oracle.convex$prediction)), colour = 'Convex')) +
geom_line(aes(x = index(acc.test),
y = coredata(as.zoo(oracle.linear$prediction)), colour = 'Linear')) +
geom_line(aes(x = index(as.zoo(acc.test)), y = coredata(acc.test), colour = 'Test')) +
scale_color_manual(name = '', values = c('Test' = 'black', 'Convex' = 'red', 'Linear' = 'blue'),
labels = c('Convex','Linear', 'Test')) +
xlab('Año 1974') + ylab('Número de accidentes de tráfico') +
scale_x_continuous(breaks = c(), labels = c())
p
combine(as.vector(model$prediction), acc.test)
mix <- mixture(model = 'EWA', loss.type = 'absolute', coefficients = 'Uniform')
model <- mix
for (i in 1:length(as.vector(acc.test))) {
model <- predict(model, X[i,], as.vector(acc.test)[i])
}
print(model)
combine(as.vector(model$prediction), acc.test)
mix <- mixture(model = 'EWA', loss.type = 'absolute', coefficients = 'Uniform')
model <- mix
for (i in 1:length(as.vector(acc.test))) {
model <- predict(model, X[i,], as.vector(acc.test)[i])
}
print(model)
combine(as.vector(model$prediction), acc.test)
mix <- mixture(model = 'EWA', loss.type = 'absolute', coefficients = 'Uniform')
model <- mix
for (i in 1:length(as.vector(acc.test))) {
model <- predict(model, X[i,], as.vector(acc.test)[i])
}
print(model)
combine(as.vector(model$prediction), acc.test)
model$prediction
acc.test
combine(model$prediction, acc.test)
acc.test
acc.test
model$weights
model$prediction
combine(model$prediction, acc.test)
combine(model$prediction, acc.test)
mix <- mixture(model = 'EWA', loss.type = 'absolute', coefficients = 'Uniform')
model <- mix
for (i in 1:length(as.vector(acc.test))) {
model <- predict(model, X[i,], as.vector(acc.test)[i])
}
print(model)
combine(model$prediction, acc.test)
combine(acc.test, model$prediction)
plot(model, pause = TRUE)
